// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/05/2018 15:38:42"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    VERIFICADOR
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module VERIFICADOR_vlg_sample_tst(
	CLK,
	Ea,
	Eb,
	RST,
	Sa,
	Sb,
	sampler_tx
);
input  CLK;
input  Ea;
input  Eb;
input  RST;
input  Sa;
input  Sb;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or Ea or Eb or RST or Sa or Sb)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module VERIFICADOR_vlg_check_tst (
	ERROR,
	INC,
	POS,
	sampler_rx
);
input  ERROR;
input [2:0] INC;
input [2:0] POS;
input sampler_rx;

reg  ERROR_expected;
reg [2:0] INC_expected;
reg [2:0] POS_expected;

reg  ERROR_prev;
reg [2:0] INC_prev;
reg [2:0] POS_prev;

reg  ERROR_expected_prev;
reg [2:0] INC_expected_prev;
reg [2:0] POS_expected_prev;

reg  last_ERROR_exp;
reg [2:0] last_INC_exp;
reg [2:0] last_POS_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	ERROR_prev = ERROR;
	INC_prev = INC;
	POS_prev = POS;
end

// update expected /o prevs

always @(trigger)
begin
	ERROR_expected_prev = ERROR_expected;
	INC_expected_prev = INC_expected;
	POS_expected_prev = POS_expected;
end


// expected INC[ 2 ]
initial
begin
	INC_expected[2] = 1'b0;
	INC_expected[2] = #30000 1'bX;
	INC_expected[2] = #969000 1'b0;
end 
// expected INC[ 1 ]
initial
begin
	INC_expected[1] = 1'b0;
	INC_expected[1] = #30000 1'bX;
	INC_expected[1] = #969000 1'b0;
end 
// expected INC[ 0 ]
initial
begin
	INC_expected[0] = 1'b0;
	INC_expected[0] = #30000 1'bX;
	INC_expected[0] = #969000 1'b0;
end 
// expected POS[ 2 ]
initial
begin
	POS_expected[2] = 1'bX;
	POS_expected[2] = #999000 1'b0;
end 
// expected POS[ 1 ]
initial
begin
	POS_expected[1] = 1'bX;
	POS_expected[1] = #999000 1'b0;
end 
// expected POS[ 0 ]
initial
begin
	POS_expected[0] = 1'bX;
	POS_expected[0] = #999000 1'b0;
end 

// expected ERROR
initial
begin
	ERROR_expected = 1'bX;
	ERROR_expected = #999000 1'b0;
end 
// generate trigger
always @(ERROR_expected or ERROR or INC_expected or INC or POS_expected or POS)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ERROR = %b | expected INC = %b | expected POS = %b | ",ERROR_expected_prev,INC_expected_prev,POS_expected_prev);
	$display("| real ERROR = %b | real INC = %b | real POS = %b | ",ERROR_prev,INC_prev,POS_prev);
`endif
	if (
		( ERROR_expected_prev !== 1'bx ) && ( ERROR_prev !== ERROR_expected_prev )
		&& ((ERROR_expected_prev !== last_ERROR_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ERROR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ERROR_expected_prev);
		$display ("     Real value = %b", ERROR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ERROR_exp = ERROR_expected_prev;
	end
	if (
		( INC_expected_prev[0] !== 1'bx ) && ( INC_prev[0] !== INC_expected_prev[0] )
		&& ((INC_expected_prev[0] !== last_INC_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INC_expected_prev);
		$display ("     Real value = %b", INC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INC_exp[0] = INC_expected_prev[0];
	end
	if (
		( INC_expected_prev[1] !== 1'bx ) && ( INC_prev[1] !== INC_expected_prev[1] )
		&& ((INC_expected_prev[1] !== last_INC_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INC_expected_prev);
		$display ("     Real value = %b", INC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INC_exp[1] = INC_expected_prev[1];
	end
	if (
		( INC_expected_prev[2] !== 1'bx ) && ( INC_prev[2] !== INC_expected_prev[2] )
		&& ((INC_expected_prev[2] !== last_INC_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INC_expected_prev);
		$display ("     Real value = %b", INC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INC_exp[2] = INC_expected_prev[2];
	end
	if (
		( POS_expected_prev[0] !== 1'bx ) && ( POS_prev[0] !== POS_expected_prev[0] )
		&& ((POS_expected_prev[0] !== last_POS_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port POS[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", POS_expected_prev);
		$display ("     Real value = %b", POS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_POS_exp[0] = POS_expected_prev[0];
	end
	if (
		( POS_expected_prev[1] !== 1'bx ) && ( POS_prev[1] !== POS_expected_prev[1] )
		&& ((POS_expected_prev[1] !== last_POS_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port POS[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", POS_expected_prev);
		$display ("     Real value = %b", POS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_POS_exp[1] = POS_expected_prev[1];
	end
	if (
		( POS_expected_prev[2] !== 1'bx ) && ( POS_prev[2] !== POS_expected_prev[2] )
		&& ((POS_expected_prev[2] !== last_POS_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port POS[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", POS_expected_prev);
		$display ("     Real value = %b", POS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_POS_exp[2] = POS_expected_prev[2];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#3000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module VERIFICADOR_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg Ea;
reg Eb;
reg RST;
reg Sa;
reg Sb;
// wires                                               
wire ERROR;
wire [2:0] INC;
wire [2:0] POS;

wire sampler;                             

// assign statements (if any)                          
VERIFICADOR i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.Ea(Ea),
	.Eb(Eb),
	.ERROR(ERROR),
	.INC(INC),
	.POS(POS),
	.RST(RST),
	.Sa(Sa),
	.Sb(Sb)
);

// RST
initial
begin
	RST = 1'b1;
	RST = #20000 1'b0;
	RST = #10000 1'b1;
end 

// CLK
initial
begin
	CLK = 1'b0;
	CLK = #50000 1'b1;
	# 10000;
	repeat(44)
	begin
		CLK = 1'b0;
		CLK = #10000 1'b1;
		# 10000;
	end
	CLK = 1'b0;
	CLK = #10000 1'b1;
	# 10000;
	repeat(102)
	begin
		CLK = 1'b0;
		CLK = #10000 1'b1;
		# 10000;
	end
end 

// Ea
initial
begin
	Ea = 1'b0;
	Ea = #350000 1'b1;
	# 350000;
	repeat(3)
	begin
		Ea = 1'b0;
		Ea = #350000 1'b1;
		# 350000;
	end
	Ea = 1'b0;
end 

// Sa
initial
begin
	Sa = 1'b0;
	Sa = #150000 1'b1;
	# 150000;
	repeat(9)
	begin
		Sa = 1'b0;
		Sa = #150000 1'b1;
		# 150000;
	end
end 

// Eb
initial
begin
	Eb = 1'b0;
	Eb = #50000 1'b1;
	# 50000;
	repeat(29)
	begin
		Eb = 1'b0;
		Eb = #50000 1'b1;
		# 50000;
	end
end 

// Sb
initial
begin
	Sb = 1'b0;
	Sb = #60000 1'b1;
	# 20000;
	repeat(73)
	begin
		Sb = 1'b0;
		Sb = #20000 1'b1;
		# 20000;
	end
end 

VERIFICADOR_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.Ea(Ea),
	.Eb(Eb),
	.RST(RST),
	.Sa(Sa),
	.Sb(Sb),
	.sampler_tx(sampler)
);

VERIFICADOR_vlg_check_tst tb_out(
	.ERROR(ERROR),
	.INC(INC),
	.POS(POS),
	.sampler_rx(sampler)
);
endmodule

