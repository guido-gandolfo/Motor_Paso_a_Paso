// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/06/2018 21:32:08"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    CONTROLADOR
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CONTROLADOR_vlg_sample_tst(
	CLK,
	HORARIO,
	MODO,
	nRST,
	sampler_tx
);
input  CLK;
input  HORARIO;
input  MODO;
input  nRST;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or HORARIO or MODO or nRST)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module CONTROLADOR_vlg_check_tst (
	SALIDA_Q0,
	SALIDA_Q1,
	SALIDA_Q2,
	sampler_rx
);
input  SALIDA_Q0;
input  SALIDA_Q1;
input  SALIDA_Q2;
input sampler_rx;

reg  SALIDA_Q0_expected;
reg  SALIDA_Q1_expected;
reg  SALIDA_Q2_expected;

reg  SALIDA_Q0_prev;
reg  SALIDA_Q1_prev;
reg  SALIDA_Q2_prev;

reg  SALIDA_Q0_expected_prev;
reg  SALIDA_Q1_expected_prev;
reg  SALIDA_Q2_expected_prev;

reg  last_SALIDA_Q0_exp;
reg  last_SALIDA_Q1_exp;
reg  last_SALIDA_Q2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	SALIDA_Q0_prev = SALIDA_Q0;
	SALIDA_Q1_prev = SALIDA_Q1;
	SALIDA_Q2_prev = SALIDA_Q2;
end

// update expected /o prevs

always @(trigger)
begin
	SALIDA_Q0_expected_prev = SALIDA_Q0_expected;
	SALIDA_Q1_expected_prev = SALIDA_Q1_expected;
	SALIDA_Q2_expected_prev = SALIDA_Q2_expected;
end



// expected SALIDA_Q2
initial
begin
	SALIDA_Q2_expected = 1'bX;
end 

// expected SALIDA_Q1
initial
begin
	SALIDA_Q1_expected = 1'bX;
end 

// expected SALIDA_Q0
initial
begin
	SALIDA_Q0_expected = 1'bX;
end 
// generate trigger
always @(SALIDA_Q0_expected or SALIDA_Q0 or SALIDA_Q1_expected or SALIDA_Q1 or SALIDA_Q2_expected or SALIDA_Q2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected SALIDA_Q0 = %b | expected SALIDA_Q1 = %b | expected SALIDA_Q2 = %b | ",SALIDA_Q0_expected_prev,SALIDA_Q1_expected_prev,SALIDA_Q2_expected_prev);
	$display("| real SALIDA_Q0 = %b | real SALIDA_Q1 = %b | real SALIDA_Q2 = %b | ",SALIDA_Q0_prev,SALIDA_Q1_prev,SALIDA_Q2_prev);
`endif
	if (
		( SALIDA_Q0_expected_prev !== 1'bx ) && ( SALIDA_Q0_prev !== SALIDA_Q0_expected_prev )
		&& ((SALIDA_Q0_expected_prev !== last_SALIDA_Q0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SALIDA_Q0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SALIDA_Q0_expected_prev);
		$display ("     Real value = %b", SALIDA_Q0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_SALIDA_Q0_exp = SALIDA_Q0_expected_prev;
	end
	if (
		( SALIDA_Q1_expected_prev !== 1'bx ) && ( SALIDA_Q1_prev !== SALIDA_Q1_expected_prev )
		&& ((SALIDA_Q1_expected_prev !== last_SALIDA_Q1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SALIDA_Q1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SALIDA_Q1_expected_prev);
		$display ("     Real value = %b", SALIDA_Q1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SALIDA_Q1_exp = SALIDA_Q1_expected_prev;
	end
	if (
		( SALIDA_Q2_expected_prev !== 1'bx ) && ( SALIDA_Q2_prev !== SALIDA_Q2_expected_prev )
		&& ((SALIDA_Q2_expected_prev !== last_SALIDA_Q2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SALIDA_Q2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SALIDA_Q2_expected_prev);
		$display ("     Real value = %b", SALIDA_Q2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_SALIDA_Q2_exp = SALIDA_Q2_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module CONTROLADOR_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg HORARIO;
reg MODO;
reg nRST;
// wires                                               
wire SALIDA_Q0;
wire SALIDA_Q1;
wire SALIDA_Q2;

wire sampler;                             

// assign statements (if any)                          
CONTROLADOR i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.HORARIO(HORARIO),
	.MODO(MODO),
	.nRST(nRST),
	.SALIDA_Q0(SALIDA_Q0),
	.SALIDA_Q1(SALIDA_Q1),
	.SALIDA_Q2(SALIDA_Q2)
);

// nRST
initial
begin
	nRST = 1'b1;
	nRST = #10000 1'b0;
	nRST = #10000 1'b1;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #5000 1'b1;
	#5000;
end 

// MODO
initial
begin
	MODO = 1'b0;
	MODO = #30000 1'b1;
	MODO = #210000 1'b0;
	MODO = #200000 1'b1;
	MODO = #70000 1'b0;
	MODO = #30000 1'b1;
	MODO = #60000 1'b0;
	MODO = #120000 1'b1;
	MODO = #100000 1'b0;
	MODO = #70000 1'b1;
	MODO = #60000 1'b0;
end 

// HORARIO
initial
begin
	HORARIO = 1'b0;
	HORARIO = #30000 1'b1;
	HORARIO = #100000 1'b0;
	HORARIO = #140000 1'b1;
	HORARIO = #120000 1'b0;
	HORARIO = #50000 1'b1;
	HORARIO = #70000 1'b0;
	HORARIO = #110000 1'b1;
	HORARIO = #50000 1'b0;
	HORARIO = #50000 1'b1;
	HORARIO = #100000 1'b0;
	HORARIO = #70000 1'b1;
	HORARIO = #60000 1'b0;
end 

CONTROLADOR_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.HORARIO(HORARIO),
	.MODO(MODO),
	.nRST(nRST),
	.sampler_tx(sampler)
);

CONTROLADOR_vlg_check_tst tb_out(
	.SALIDA_Q0(SALIDA_Q0),
	.SALIDA_Q1(SALIDA_Q1),
	.SALIDA_Q2(SALIDA_Q2),
	.sampler_rx(sampler)
);
endmodule

