// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/06/2018 15:47:10"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    encoder
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module encoder_vlg_sample_tst(
	Ea,
	Eb,
	Sa,
	Sb,
	sampler_tx
);
input  Ea;
input  Eb;
input  Sa;
input  Sb;
output sampler_tx;

reg sample;
time current_time;
always @(Ea or Eb or Sa or Sb)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module encoder_vlg_check_tst (
	ERRORPOSICION,
	PASOACTUAL,
	sampler_rx
);
input  ERRORPOSICION;
input [2:0] PASOACTUAL;
input sampler_rx;

reg  ERRORPOSICION_expected;
reg [2:0] PASOACTUAL_expected;

reg  ERRORPOSICION_prev;
reg [2:0] PASOACTUAL_prev;

reg  ERRORPOSICION_expected_prev;
reg [2:0] PASOACTUAL_expected_prev;

reg  last_ERRORPOSICION_exp;
reg [2:0] last_PASOACTUAL_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	ERRORPOSICION_prev = ERRORPOSICION;
	PASOACTUAL_prev = PASOACTUAL;
end

// update expected /o prevs

always @(trigger)
begin
	ERRORPOSICION_expected_prev = ERRORPOSICION_expected;
	PASOACTUAL_expected_prev = PASOACTUAL_expected;
end


// expected PASOACTUAL[ 2 ]
initial
begin
	PASOACTUAL_expected[2] = 1'bX;
end 
// expected PASOACTUAL[ 1 ]
initial
begin
	PASOACTUAL_expected[1] = 1'bX;
end 
// expected PASOACTUAL[ 0 ]
initial
begin
	PASOACTUAL_expected[0] = 1'bX;
end 

// expected ERRORPOSICION
initial
begin
	ERRORPOSICION_expected = 1'bX;
end 
// generate trigger
always @(ERRORPOSICION_expected or ERRORPOSICION or PASOACTUAL_expected or PASOACTUAL)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ERRORPOSICION = %b | expected PASOACTUAL = %b | ",ERRORPOSICION_expected_prev,PASOACTUAL_expected_prev);
	$display("| real ERRORPOSICION = %b | real PASOACTUAL = %b | ",ERRORPOSICION_prev,PASOACTUAL_prev);
`endif
	if (
		( ERRORPOSICION_expected_prev !== 1'bx ) && ( ERRORPOSICION_prev !== ERRORPOSICION_expected_prev )
		&& ((ERRORPOSICION_expected_prev !== last_ERRORPOSICION_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ERRORPOSICION :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ERRORPOSICION_expected_prev);
		$display ("     Real value = %b", ERRORPOSICION_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ERRORPOSICION_exp = ERRORPOSICION_expected_prev;
	end
	if (
		( PASOACTUAL_expected_prev[0] !== 1'bx ) && ( PASOACTUAL_prev[0] !== PASOACTUAL_expected_prev[0] )
		&& ((PASOACTUAL_expected_prev[0] !== last_PASOACTUAL_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PASOACTUAL[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PASOACTUAL_expected_prev);
		$display ("     Real value = %b", PASOACTUAL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_PASOACTUAL_exp[0] = PASOACTUAL_expected_prev[0];
	end
	if (
		( PASOACTUAL_expected_prev[1] !== 1'bx ) && ( PASOACTUAL_prev[1] !== PASOACTUAL_expected_prev[1] )
		&& ((PASOACTUAL_expected_prev[1] !== last_PASOACTUAL_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PASOACTUAL[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PASOACTUAL_expected_prev);
		$display ("     Real value = %b", PASOACTUAL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_PASOACTUAL_exp[1] = PASOACTUAL_expected_prev[1];
	end
	if (
		( PASOACTUAL_expected_prev[2] !== 1'bx ) && ( PASOACTUAL_prev[2] !== PASOACTUAL_expected_prev[2] )
		&& ((PASOACTUAL_expected_prev[2] !== last_PASOACTUAL_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PASOACTUAL[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PASOACTUAL_expected_prev);
		$display ("     Real value = %b", PASOACTUAL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_PASOACTUAL_exp[2] = PASOACTUAL_expected_prev[2];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module encoder_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Ea;
reg Eb;
reg Sa;
reg Sb;
// wires                                               
wire ERRORPOSICION;
wire [2:0] PASOACTUAL;

wire sampler;                             

// assign statements (if any)                          
encoder i1 (
// port map - connection between master ports and signals/registers   
	.Ea(Ea),
	.Eb(Eb),
	.ERRORPOSICION(ERRORPOSICION),
	.PASOACTUAL(PASOACTUAL),
	.Sa(Sa),
	.Sb(Sb)
);

// Ea
initial
begin
	Ea = 1'b1;
end 

// Sa
initial
begin
	Sa = 1'b1;
end 

// Eb
initial
begin
	Eb = 1'b1;
end 

// Sb
initial
begin
	Sb = 1'b1;
end 

encoder_vlg_sample_tst tb_sample (
	.Ea(Ea),
	.Eb(Eb),
	.Sa(Sa),
	.Sb(Sb),
	.sampler_tx(sampler)
);

encoder_vlg_check_tst tb_out(
	.ERRORPOSICION(ERRORPOSICION),
	.PASOACTUAL(PASOACTUAL),
	.sampler_rx(sampler)
);
endmodule

